@using Microsoft.AspNetCore.Mvc.ModelBinding
@model Quizowa.Models.Question
@{
    // Pobierz wartość QuestionIndex, która została przekazana z widoku nadrzędnego
    var questionIndex = ViewData["QuestionIndex"] as int? ?? 0;
    
    var uniqueQuestionTextId = $"Questions_{questionIndex}__QuestionText";
    var uniquePointsId = $"Questions_{questionIndex}__Points";
}

<div class="card mt-3 question-block" data-question-index="@questionIndex">
    <div class="card-header">
        Pytanie @(questionIndex + 1)
        <button type="button" class="btn btn-danger btn-sm float-end remove-question-btn">Usuń pytanie</button>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label asp-for="QuestionText" class="form-label">Treść pytania</label>
            <input asp-for="QuestionText" name="Questions[@questionIndex].QuestionText" id="@uniqueQuestionTextId" class="form-control" />
            <span asp-validation-for="QuestionText" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Points" class="form-label">Punkty</label>
            <input asp-for="Points" name="Questions[@questionIndex].Points" id="@uniquePointsId" class="form-control" />
            <span asp-validation-for="Points" class="text-danger"></span>
        </div>

        <h5>Odpowiedzi:</h5>
        <div class="answers-container" id="answersContainer_@questionIndex">
            @if (Model.Answers != null)
            {
                for (int i = 0; i < Model.Answers.Count; i++)
                {

                    @* KLUCZOWA ZMIANA: Tworzymy nowy, pusty ViewDataDictionary.
                       To zapewni, że QuestionIndex i AnswerIndex są dodawane tylko raz,
                       do czystego kontekstu, eliminując duplikacje. *@
                    <partial name="_AnswerFormPartial"
                             model="Model.Answers[i]"
                             view-data='new ViewDataDictionary<Quizowa.Models.Answer>(
                                          ViewContext.HttpContext.RequestServices.GetService(typeof(IModelMetadataProvider)) as IModelMetadataProvider,
                                          ViewContext.ModelState)
                              {
                                  { "QuestionIndex", questionIndex },
                                  { "AnswerIndex", i }
                              }' />


                }
            }
        </div>
        <button type="button" class="btn btn-secondary btn-sm mt-2 add-answer-btn">Dodaj odpowiedź</button>
    </div>
</div>